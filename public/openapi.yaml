openapi: 3.0.3
info:
  title: BEPRO
  description: BEPRO API Documentation
  version: 2.7.0
  contact:
    name: Hello
    email: hello@taikai.network
servers:
  - url: 'https://app.bepro.network/api'
    description: production api
  - url: 'https://aurelius.taikai.network/api'
    description: Aurelius TEST api
  - url: 'https://seneca.taikai.network/api'
    description: Seneca TEST api
  - url: 'https://diogenes.taikai.network/api'
    description: Diogenes TEST api
  - url: 'https://apollodorus.taikai.network/api'
    description: Apollodorus TEST api

components:
  schemas:
    String:
      type: string

    StringUrl:
      type: string
      description: Url of asset

    StringAddress:
      type: string
      description: wallet/contract address string

    DbId:
      type: integer
      description: database id of asset

    Date:
      type: string
      description: UTC format date of asset

    NetworkDbId:
      type: string
      description: id of network in database

    TokenDbId:
      type: string
      description: id of token in database

    BountyState:
      type: string
      enum:
        - pending
        - draft
        - open
        - closed

    NetworkParameterLimit:
      type: object
      properties:
        min:
          type: integer
        max:
          type: integer

    Curator:
      type: object
      properties:
        id:
          type: integer
        address:
          $ref: '#/components/schemas/StringAddress'
        acceptedProposals:
          type: integer
        disputedProposals:
          type: integer
        tokensLocked:
          type: integer
        networkId:
          $ref: '#/components/schemas/NetworkDbId'
        isCurrentlyCurator:
          type: boolean
    PullRequestPayload:
      type: object
      properties:
        issueGithubID:
          type: string
        title:
          type: string
        description:
          type: string
        username:
          type: string
        branch:
          type: string
        networkName:
          type: string
    PullRequest:
      type: object
      properties:
        githubId:
          type: string
        issueId:
          type: integer
        githubLogin:
          type: string
        userRepo:
          type: string
        userBranch:
          type: string
        userAddress:
          type: string
        status:
          type: string
        contractId:
          type: string
        reviewers:
          type: array
          items:
            type: string
        network_id:
          $ref: '#/components/schemas/NetworkDbId'
    MergeProposal:
      type: object
      properties:
        issueId:
          type: string
        pullRequestId:
          type: integer
        githubLogin:
          type: string
        creator:
          $ref: '#/components/schemas/StringAddress'
        network_id:
          $ref: '#/components/schemas/NetworkDbId'
        contractCreationDate:
          type: string
        disputeWeight:
          type: string
        refusedByOwner:
          type: boolean
          default: false
        isDisputed:
          type: boolean
          default: false
    Benefactor:
      description: Benefactor of funding
      type: object
      properties:
        id:
          type: integer
        amount:
          type: integer
        address:
          type: string
        contractId:
          type: string
        issueId:
          type: string
    Payment:
      description: User payment summary
      type: object
      properties:
        address:
          $ref: '#/components/schemas/String'
        ammount:
          type: integer
        issueId:
          $ref: '#/components/schemas/String'
        transactionHash:
          type: string
          description: transaction hash of payment
    Token:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DbId'
        name:
          $ref: '#/components/schemas/String'
        symbol:
          $ref: '#/components/schemas/String'
        address:
          $ref: '#/components/schemas/String'
        isTransactional:
          type: boolean
        isAllowed:
          type: boolean
    Bounty:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DbId'
        issueId:
          type: integer
          description: database bounty id
        githubId:
          type: string
          description: github issue id
        state:
          $ref: '#/components/schemas/BountyState'
        creatorAddress:
          $ref: '#/components/schemas/String'
        creatorGithub:
          $ref: '#/components/schemas/String'
        amount:
          type: string
          description: Bounty amount
        fundingAmount:
          type: string
          description: 0 if not funding
        fundedAmount:
          type: string
          description: total funded amount
        title:
          $ref: '#/components/schemas/String'
        body:
          $ref: '#/components/schemas/String'
        working:
          type: array
          items:
            $ref: '#/components/schemas/String'
        merged:
          type: string
          description: id of merged
        seoImage:
          $ref: '#/components/schemas/StringUrl'
        network_id:
          $ref: '#/components/schemas/NetworkDbId'
        contractId:
          type: string
          description: bounty index in smart contract
        tokenId:
          $ref: '#/components/schemas/TokenDbId'
        fundedAt:
          $ref: '#/components/schemas/Date'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/String'
    LeaderboardEntry:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/StringAddress'
        githubHandle:
          type: string
        numberNfts:
          type: integer
        ownedBountiesOpened:
          type: integer
        ownedBountiesClosed:
          type: integer
        ownedBountiesCanceled:
          type: integer
        ownedProposalCreated:
          type: integer
        ownedProposalAccepted:
          type: integer
        ownedProposalRejected:
          type: integer
    Network:
      type: object
      properties:
        creatorAddress:
          $ref: '#/components/schemas/StringAddress'
        name:
          type: string
        description:
          type: string
        networkAddress:
          $ref: '#/components/schemas/StringAddress'
        logoIcon:
          type: string
        fullLogo:
          type: string
        isClosed:
          type: boolean
        isRegistered:
          type: boolean
        councilMembers:
          type: array
          items:
            type: string
        allowCustomTokens:
          type: boolean
        isDefault:
          type: boolean
        totalValueLock:
          type: integer
        countIssues:
          type: integer
    Settings:
      type: object
      properties:
        chainIds:
          type: object
        contracts:
          type: object
          properties:
            settlerToken:
              $ref: '#/components/schemas/StringAddress'
            network:
              $ref: '#/components/schemas/StringAddress'
            nftToken:
              $ref: '#/components/schemas/StringAddress'
            networkRegistry:
              $ref: '#/components/schemas/StringAddress'
            transactionalToken:
              $ref: '#/components/schemas/StringAddress'
        currency:
          type: object
          properties:
            defaultToken:
              type: string
            api:
              $ref: '#/components/schemas/StringUrl'
            defaultFiat:
              type: string
            conversionList:
              type: array
              items:
                type: object
                properties:
                  value:
                    type: string
                  label:
                    type: string
        defaultNetworkConfig:
          type: object
          properties:
            name:
              type: string
            allowCustomTokens:
              type: boolean
            adminWallet:
              type: string
        github:
          type: object
          properties:
            botUser:
              type: string
        networkParametersLimits:
          type: object
          properties:
            draftTime:
              $ref: '#/components/schemas/NetworkParameterLimit'
            disputableTime:
              $ref: '#/components/schemas/NetworkParameterLimit'
            councilAmount:
              $ref: '#/components/schemas/NetworkParameterLimit'
            disputePercentage:
              $ref: '#/components/schemas/NetworkParameterLimit'
        requiredChain:
          type: object
          properties:
            name:
              type: string
            id:
              type: string
            token:
              type: string
        urls:
          type: object
          properties:
            blockScan:
              $ref: '#/components/schemas/StringUrl'
            web3Provider:
              $ref: '#/components/schemas/StringUrl'
            api:
              $ref: '#/components/schemas/StringUrl'
            nft:
              $ref: '#/components/schemas/StringUrl'
            home:
              $ref: '#/components/schemas/StringUrl'
            ipfs:
              $ref: '#/components/schemas/StringUrl'
        beproToken:
          $ref: '#/components/schemas/Token'
        minBountyValue:
          type: string

    SearchParamsTime:
      enum: [ hour, week, month, year ]
      type: string

    Search:
      type: object
      properties:
        pages:
          type: integer
        currentPage:
          type: integer
        rows:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Bounty'
              - $ref: '#/components/schemas/Curator'
              - $ref: '#/components/schemas/LeaderboardEntry'
              - $ref: '#/components/schemas/Network'

paths:
  /health:
    description: API Health
    get:
      responses:
        204:
          description: Good
  /files:
    post:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/String'
        403:
          description: Failed to upload to IPFS
        400:
          description: No Files
  /issue/:
    post:
      description: Create new Bounty on the database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Bounty title
                body:
                  type: string
                  description: Markdown body of bounty
                networkName:
                  type: string
                  description: network name where bounty should be created
                tags:
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
      responses:
        404:
          description: invalid network
          content:
            application/json:
              schema:
                type: string
        409:
          description: issue already exists
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: id
    get:
      description: retrieve bounty from database
      responses:
        404:
          description: Invalid network, bounty not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bounty'
  /issue/working:
    put:
      description: Change working state on database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                issueId:
                  type: string
                githubLogin:
                  type: string
                networkName:
                  type: string
      responses:
        404:
          description: Invalid network, bounty not found
          content:
            application/json:
              schema:
                type: string
        409:
          description: Already working
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  body:
                    type: string
                  updatedAt:
                    $ref: '#/components/schemas/Date'
                  author:
                    type: string
  /issue/{id}/{networkName}/{chainName}/:
    get:
      description: Retrieve single issue from database
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: networkName
          required: true
          schema:
            type: string
        - in: path
          name: chainName
          required: true
          schema:
            type: string
      responses:
        404:
          description: Invalid network, bounty not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bounty'
  /merge-proposal/{id}/:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeProposal'
  /network/management/{id}/whitelist/:
    get:
      description: "retrieves the list for the allow list of the network"
      responses:
        400:
          description: "invalid params"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        200:
          description: "results the list if no address given"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /network/management/{id}/whitelist/{address}:
    post:
      description: "adds a new address to the allow_list column"
      responses:
        400:
          description: "invalid params"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        200:
          description: "created returns the updated list"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    get:
      description: "checks for allow list or existence of address"
      responses:
        400:
          description: "invalid params"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        200:
          description: "results the list if no address given"
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed:
                    type: boolean
    delete:
      description: "removes an item from the list"
      responses:
        400:
          description: "invalid params"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        200:
          description: "deleted, returns the updated array"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /nft/:
    post:
      description: create a nft for the given bounty
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                issueContractId:
                  type: string
                proposalContractId:
                  type: string
                networkName:
                  type: string
      responses:
        400:
          description: missing parameters
          content:
            application/json:
              schema:
                type: string
        404:
          description: Network not found, invalid bounty, proposal invalid, pr invalid
          content:
            application/json:
              schema:
                type: string
        500:
          description: Failed to start chain connection, failed to create hash
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    $ref: '#/components/schemas/StringUrl'
  /payments/:
    get:
      description: get User payment summary
      parameters:
        - in: query
          name: wallet
          schema:
            $ref: '#/components/schemas/StringAddress'
          required: true
        - in: query
          name: networkName
          schema:
            type: string
          required: true
        - in: query
          name: startDate
          required: true
          schema:
            $ref: '#/components/schemas/Date'
        - in: query
          name: endDate
          required: true
          schema:
            $ref: '#/components/schemas/Date'
      responses:
        404:
          description: Invalid network, invalid date, payment not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
  /pull-request/:
    get:
      description: retrieve one or more pull-requests from database
      parameters:
        - in: query
          name: login
          required: true
          schema:
            type: string
        - in: query
          name: issueId
          required: true
          schema:
            type: string
        - in: query
          name: networkName
          required: true
          schema:
            type: string
      responses:
        404:
          description: Invalid network, Issue not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/PullRequest'
    post:
      description: create new pull-request in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullRequestPayload'
      responses:
        404:
          description: Invalid network, Issue not found
          content:
            application/json:
              schema:
                type: string
        422:
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  bountyId:
                    type: string
                  originRepo:
                    type: string
                  originBranch:
                    type: string
                  originCID:
                    type: string
                  userRepo:
                    type: string
                  userBranch:
                    type: string
                  cid:
                    type: string
  # DELETE operations can't have body, but we do. need to refactor so we can document it
  #    delete:
  #      description: Remove pull-request from database
  #      requestBody:
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/PullRequestPayload'
  #      responses:
  #        500:
  #          description: Failed blockchain connection
  #          content:
  #            application/json:
  #              schema:
  #                type: string
  #        404:
  #          description: Invalid network, Issue not found, PR not found
  #          content:
  #            application/json:
  #              schema:
  #                type: string
  #        200:
  #          description: OK
  #          content:
  #            application/json:
  #              schema:
  #                type: string
  /pull-request/merge/:
    post:
      description: merge the pull-request on github
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                issueId:
                  type: string
                pullRequestId:
                  type: string
                mergeProposalId:
                  type: string
                address:
                  $ref: '#/components/schemas/StringAddress'
                networkName:
                  type: string
      responses:
        500:
          description: Failed blockchain connection
          content:
            application/json:
              schema:
                type: string
        404:
          description: Invalid network, Issue not found, PR not found
          content:
            application/json:
              schema:
                type: string
        403:
          description: Not authorized
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
  /pull-reques/review/:
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                issueId:
                  type: string
                pullRequestId:
                  type: string
                githubLogin:
                  type: string
                body:
                  type: string
                networkName:
                  type: string
                event:
                  type: string
      responses:
        404:
          description: Invalid network, Issue not found, PR not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  body:
                    type: string
                  updatedAt:
                    type: string
                  author:
                    type: string
  /rss/:
    get:
      description: query rss
      parameters:
        - in: query
          name: type
          required: true
          schema:
            enum: [ all, open, closed ]
            type: string
            default: all
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
      responses:
        403:
          description: Wrong type
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            text/xml:
              schema:
                type: string
  /search/curators/:
    get:
      parameters:
        - in: query
          name: address
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: networkName
          schema:
            type: string
        - in: query
          name: isCurrentlyCurator
          schema:
            enum: [ true, false ]
            type: string
      responses:
        404:
          description: Invalid network
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /search/issues/:
    get:
      parameters:
        - in: query
          name: state
          schema:
            $ref: '#/components/schemas/BountyState'
        - in: query
          name: issueId
          schema:
            type: string
        - in: query
          name: time
          schema:
            $ref: '#/components/schemas/SearchParamsTime'
        - in: query
          name: creator
          schema:
            type: string
        - in: query
          name: address
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: pullRequesterLogin
          schema:
            type: string
        - in: query
          name: pullrequesterAddress
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: proposer
          schema:
            type: string
        - in: query
          name: allNetworks
          schema:
            type: boolean
        - in: query
          name: networkName
          schema:
            type: string
        - in: query
          name: tokenAddress
          schema:
            $ref: '#/components/schemas/StringAddress'
      responses:
        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                type: string
        404:
          description: Invalid network
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /search/issues/recent/:
    get:
      description: Get list of recent bounties
      parameters:
        - in: query
          name: creator
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: address
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: networkName
          schema:
            type: string
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: order
          schema:
            enum: [ DESC, ASC ]
            type: string
      responses:
        404:
          description: Network not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /search/issues/total:
    get:
      description: Get total number of issues
      parameters:
        - in: query
          name: state
          schema:
            $ref: '#/components/schemas/BountyState'
        - in: query
          name: issueId
          schema:
            type: string
        - in: query
          name: creator
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: address
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: networkName
          schema:
            type: string
      responses:
        404:
          description: Network not found
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
  /search/leaderboard/:
    get:
      description: get leaderboard info
      parameters:
        - in: query
          name: address
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: time
          schema:
            $ref: '#/components/schemas/SearchParamsTime'
        - in: query
          name: search
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /search/leaderboard/points:
    get:
      description: get leaderboard with calculated points
      parameters:
        - in: query
          name: address
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: order
          schema:
            enum: [ DESC, ASC ]
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /search/networks/:
    get:
      description: search networks in database
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: creatorAddress
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: networkAddress
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: isClosed
          schema:
            type: boolean
        - in: query
          name: isRegistered
          schema:
            type: boolean
        - in: query
          name: isDefault
          schema:
            type: boolean
        - in: query
          name: page
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /search/networks/active:
    get:
      description: search networks in database
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: creatorAddress
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: isClosed
          schema:
            type: boolean
        - in: query
          name: isRegistered
          schema:
            type: boolean
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: order
          schema:
            enum: [ DESC, ASC ]
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /search/networks/total:
    get:
      description: get total of networks
      parameters:
        - in: query
          name: creatorAddress
          schema:
            $ref: '#/components/schemas/StringAddress'
        - in: query
          name: isClosed
          schema:
            type: boolean
        - in: query
          name: isRegistered
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
  /seo/{id}/:
    get:
      description: Get SEO image url for bounty
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        500:
          description: Missing ipfs url on settings
          content:
            application/json:
              schema:
                type: string
        400:
          description: issue not found
          content:
            application/json:
              schema:
                type: string
                example: 'null'
        200:
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
  /settings/:
    get:
      description: Get settings from database
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
  /setup/registry:
    post:
      description: configure registry address when none exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                wallet:
                  $ref: '#/components/schemas/StringAddress'
                registryAddress:
                  $ref: '#/components/schemas/StringAddress'
      responses:
        500:
          description: Failed blockchain connection
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        400:
          description: Missing params, Invalid registry address, Environment already configured
          content:
            application/json:
              schema:
                type: string
  /tokens/:
    get:
      description: Get available tokens on database
      parameters:
        - in: query
          name: networkName
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
  /user/connect/:
    patch:
      description: connect wallet and github on database user must be connected on app so headers match
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                wallet:
                  $ref: '#/components/schemas/StringAddress'
      responses:
        409:
          description: No actions needed
          content:
            application/json:
              schema:
                type: string
        404:
          description: Missing wallet address
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "success"
  /user/reset/:
    post:
      description: reset user on database user has to be connected on app so headers match
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  $ref: '#/components/schemas/StringAddress'
                githubLogin:
                  type: string
      responses:
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string